1，设置mysql配置文件，将数据库默认编码转化为utf8
     vim /etc/my.cnf
    
     [client]
     default-character-set = utf8
     [mysqld]
     default-storage-engine = INNODB
     character-set-server = utf8
     collation-server = utf8_general_ci
 
     重启 systemctl restart mariadb
     登陆mysql后， show variables like '%char%'  查看mysql的编码情况


2，安装支持Python的MySQL驱动
     pip install mysql-connector
     

3，演示：连接到MySQL服务器的test数据库
     # 导入MySQL驱动 
     import mysql.connector
     # 连接数据库
     conn = mysql.connector.connect(user='root', password='password', database='test')
     # 连接到数据库后，需要打开游标，称之为Cursor，通过Cursor执行SQL语句，然后，获得执行结果
     cursor = conn.cursor()

     # 创建user表:
     cursor.execute('create table user (id varchar(20) primary key, name varchar(20))')
     # 插入一行记录，注意MySQL的占位符是%s:
     cursor.execute('insert into user (id, name) values (%s, %s)', ['1', 'Michael'])
     print(cursor.rowcount)   # 获得插入的行数
     conn.commit()     #  执行insert等操作后要调用commit()提交事务
     cursor.close()       #  关闭游标

     # 查询:
     cursor = conn.cursor()
     cursor.execute('select * from user where id = %s', ('1',))
     values = cursor.fetchall()    # 获得查询结果集
     print(values)
     cursor.close()
     conn.close()   # 关闭连接


4，增删改查
#!/usr/bin/python
# -*- coding: UTF-8 -*-

from bottle import route, run, static_file
from bottle import request
import collections
import mysql.connector

page='''
<html>
<form action="/add" method="post">
name <input type="text" name="name" vlaue=""/>
todo <input type="text" name="todo" value=""/>
<input type="submit" value="提交"/>
</form>
</html>
'''

conn = mysql.connector.connect(user='root', password='root', database='wlp')
cursor = conn.cursor()

@route('/todo')
def todo():
        return page


@route('/create')
def create():
        # buffered=True会把结果集保存到本地并一次性返回，这样可以提高性能
        cursor = conn.cursor(buffered=True)
        try:
            create = ('create table todo ( \
                       id int primary key auto_increment,\
                       name varchar(20),\
                       todo varchar(20))\
                       DEFAULT CHARSET = utf8')
            cursor.execute(create)
        except mysql.connector.Error as e:
            return('数据表创建失败',str(e))
        finally:
            cursor.close() # 关闭标记位
            #conn.close()   # 关闭数据库链接           
        return '<html><h1>数据表创建成功</h1><a href="/todo">点击回到todo主页</a></html>'
                
def m_add(name, todo):
        cursor = conn.cursor(buffered=True)
        try:
            # 插入单条数据
            # 占位符只能用%s，用%d或者其他会出错
            insert = ("insert into todo values(%s,%s,%s)")
            data = (0,name,todo)
            cursor.execute(insert, data)            
            # 插入多条
            data = [(0,name,todo),(0,name,todo)]
            cursor.executemany(insert, data)
            conn.commit()
        except mysql.connector.Error as e:
            return('数据插入失败',str(e))
        finally:
            cursor.close() 
            #conn.close()   

@route('/add', method='POST')
def add_todo():
        # 取出客户端传来的数据，name和todo
        name = request.forms.get('name')
        todo = request.forms.get('todo')
        m_add(name, todo)
        return '<html><h1>%s已保存</h1><a href="/todo">点击回到todo主页</a></html>'%(name)


@route('/del/<name>')
def del_todo(name):
        cursor = conn.cursor(buffered=True)
        try:
	    cursor.execute('delete from todo where name = %s', (name,))	
            conn.commit()
        except mysql.connector.Error as e:
            print('数据删除失败',str(e))
        finally:
            cursor.close() 
            #conn.close()        
            #conn.close()  # ！！！ 加上这句话，第二次执行删除操作会报错 OperationalError: MySQL Connection not available 
	return '<html><h1>%s已删除</h1><a href="/todo">点击回到todo主页</a></html>' %(name)

        
def m_find(name):
        cursor = conn.cursor(buffered=True)
        try:
            lis = [] 
            dic = collections.OrderedDict()
	    select = 'select name,todo from todo where name = %s'
            cursor.execute(select, (name,))
	    ret = cursor.fetchall()
            for name,todo in ret:
                dic['name'] = name
                dic['todo'] = todo
                lis.append(dic)
            count = len(lis)
        except mysql.connector.Error as e:
            return('数据查找失败',str(e))
        finally:
            cursor.close() 
            #conn.close()          
	return '<html><h1>共%s条数据, %s</h1><a href="/todo">点击回到todo主页</a></html>' %(count,lis)

@route('/find/<name>')
def find_todo(name):
	todos = m_find(name)
	return todos

run(host='127.0.0.1',port='10090',debug=True,reloader=True)


参考文档：
https://www.cnblogs.com/R-bear/p/7022231.html
https://dev.mysql.com/doc/connector-python/en/
廖雪峰python